# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aY4zBlhjI0NPEGCtF28Sl_ZkbXFCll5Y
"""

pip install --upgrade xgboost scikit-learn

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import xgboost as xgb
import shap

heart_data = pd.read_csv('heart.csv')
data.head()

print("Data Overview:")
print(heart_data.info())
print(heart_data.describe())

plt.figure(figsize=(10, 8))
sns.heatmap(heart_data.corr(), annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

X = heart_data.drop("target", axis=1)
y = heart_data["target"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

xgb_model = xgb.XGBClassifier(eval_metric='logloss', random_state=42)
xgb_model.fit(X_train, y_train)

y_pred = xgb_model.predict(X_test)
print("Classification Report:")
print(classification_report(y_test, y_pred))

df_feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': xgb_model.feature_importances_
}).sort_values(by='Importance', ascending=False)

print("Feature Importances:")
print(df_feature_importance)


plt.figure(figsize=(10, 6))
plt.barh(df_feature_importance['Feature'], df_feature_importance['Importance'], color='skyblue')
plt.xlabel('Importance')
plt.ylabel('Features')
plt.title('Feature Importance in XGBoost Model')
plt.gca().invert_yaxis()
plt.show()


explainer = shap.TreeExplainer(xgb_model)
shap_values = explainer.shap_values(X_test)


shap.summary_plot(shap_values, X_test)


for i in range(3):
    print(f"SHAP Explanation for Sample {i+1}:")
    shap.force_plot(
        explainer.expected_value,
        shap_values[i],
        X_test.iloc[i],
        matplotlib=True
    )


def generate_recommendations(sample, shap_values, feature_names):
    recommendations = []


    if sample['chol'] > 200:
        recommendations.append("Reduce cholesterol intake through diet.")
    if sample['trestbps'] > 130:
        recommendations.append("Monitor blood pressure and consult a doctor.")
    if sample['age'] > 50:
        recommendations.append("Consider regular cardiovascular check-ups.")


    shap_impact = pd.DataFrame({
        'Feature': feature_names,
        'SHAP Value': shap_values
    }).sort_values(by='SHAP Value', ascending=False)

    recommendations.append("Key influencing features:")
    recommendations.extend(list(shap_impact['Feature'].head(3)))

    return recommendations


sample = X_test.iloc[0]
sample_shap_values = shap_values[0]
recommendations = generate_recommendations(sample, sample_shap_values, X_test.columns)
print("\nPersonalized Recommendations:")
for rec in recommendations:
    print(f"- {rec}")